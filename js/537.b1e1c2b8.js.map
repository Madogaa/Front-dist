{"version":3,"file":"js/537.b1e1c2b8.js","mappings":"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","sources":["webpack://dotshare/../src/implementation/constants.ts","webpack://dotshare/../src/implementation/error.ts","webpack://dotshare/../src/implementation/connection.ts","webpack://dotshare/../src/implementation/location.ts","webpack://dotshare/../src/implementation/failrequest.ts","webpack://dotshare/../src/implementation/backoff.ts","webpack://dotshare/../src/implementation/type.ts","webpack://dotshare/../src/implementation/url.ts","webpack://dotshare/../src/implementation/utils.ts","webpack://dotshare/../src/implementation/request.ts","webpack://dotshare/../src/implementation/fs.ts","webpack://dotshare/../src/platform/browser/base64.ts","webpack://dotshare/../src/implementation/string.ts","webpack://dotshare/../src/implementation/blob.ts","webpack://dotshare/../src/implementation/json.ts","webpack://dotshare/../src/implementation/path.ts","webpack://dotshare/../src/implementation/metadata.ts","webpack://dotshare/../src/implementation/requestinfo.ts","webpack://dotshare/../src/implementation/requests.ts","webpack://dotshare/../src/platform/browser/connection.ts","webpack://dotshare/../src/reference.ts","webpack://dotshare/../src/service.ts","webpack://dotshare/../src/constants.ts","webpack://dotshare/../src/api.ts","webpack://dotshare/../src/index.ts","webpack://dotshare/../src/crypt.ts","webpack://dotshare/../src/global.ts","webpack://dotshare/../src/defaults.ts","webpack://dotshare/../src/deferred.ts","webpack://dotshare/../src/emulator.ts","webpack://dotshare/../src/environment.ts","webpack://dotshare/../src/errors.ts","webpack://dotshare/../src/obj.ts","webpack://dotshare/../src/compat.ts","webpack://dotshare/../../index.ts","webpack://dotshare/./src/vuefire/firebase.js","webpack://dotshare/../../src/logger.ts","webpack://dotshare/./node_modules/idb/build/wrap-idb-value.js","webpack://dotshare/./node_modules/idb/build/index.js","webpack://dotshare/../../src/platformLoggerService.ts","webpack://dotshare/../../src/constants.ts","webpack://dotshare/../../src/internal.ts","webpack://dotshare/../../src/errors.ts","webpack://dotshare/../../src/firebaseApp.ts","webpack://dotshare/../../src/api.ts","webpack://dotshare/../../src/indexeddb.ts","webpack://dotshare/../../src/heartbeatService.ts","webpack://dotshare/../../src/registerCoreComponents.ts","webpack://dotshare/../../src/index.ts","webpack://dotshare/../../src/component.ts","webpack://dotshare/../../src/provider.ts","webpack://dotshare/../../src/component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from 'firebase/app'\r\nimport { getStorage, ref } from 'firebase/storage'\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyC-XNMFyNzq8XlMcSNjeJquOpoS9_I9tNQ',\r\n  authDomain: 'dotshare-0.firebaseapp.com',\r\n  projectId: 'dotshare-0',\r\n  storageBucket: 'dotshare-0.appspot.com',\r\n  messagingSenderId: '240135692735',\r\n  appId: '1:240135692735:web:53b2d06c51f2cb8803c10a'\r\n}\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig)\r\n\r\nconst storage = getStorage(app)\r\n\r\nconst storageRef = ref(storage)\r\n\r\nconst imagesRef = ref(storage, 'images/')\r\n\r\nexport {\r\n  storage,\r\n  storageRef,\r\n  imagesRef\r\n}\r\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\r\n\r\nlet idbProxyableTypes;\r\nlet cursorAdvanceMethods;\r\n// This is a function to prevent it throwing up in node environments.\r\nfunction getIdbProxyableTypes() {\r\n    return (idbProxyableTypes ||\r\n        (idbProxyableTypes = [\r\n            IDBDatabase,\r\n            IDBObjectStore,\r\n            IDBIndex,\r\n            IDBCursor,\r\n            IDBTransaction,\r\n        ]));\r\n}\r\n// This is a function to prevent it throwing up in node environments.\r\nfunction getCursorAdvanceMethods() {\r\n    return (cursorAdvanceMethods ||\r\n        (cursorAdvanceMethods = [\r\n            IDBCursor.prototype.advance,\r\n            IDBCursor.prototype.continue,\r\n            IDBCursor.prototype.continuePrimaryKey,\r\n        ]));\r\n}\r\nconst cursorRequestMap = new WeakMap();\r\nconst transactionDoneMap = new WeakMap();\r\nconst transactionStoreNamesMap = new WeakMap();\r\nconst transformCache = new WeakMap();\r\nconst reverseTransformCache = new WeakMap();\r\nfunction promisifyRequest(request) {\r\n    const promise = new Promise((resolve, reject) => {\r\n        const unlisten = () => {\r\n            request.removeEventListener('success', success);\r\n            request.removeEventListener('error', error);\r\n        };\r\n        const success = () => {\r\n            resolve(wrap(request.result));\r\n            unlisten();\r\n        };\r\n        const error = () => {\r\n            reject(request.error);\r\n            unlisten();\r\n        };\r\n        request.addEventListener('success', success);\r\n        request.addEventListener('error', error);\r\n    });\r\n    promise\r\n        .then((value) => {\r\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\r\n        // (see wrapFunction).\r\n        if (value instanceof IDBCursor) {\r\n            cursorRequestMap.set(value, request);\r\n        }\r\n        // Catching to avoid \"Uncaught Promise exceptions\"\r\n    })\r\n        .catch(() => { });\r\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\r\n    // is because we create many promises from a single IDBRequest.\r\n    reverseTransformCache.set(promise, request);\r\n    return promise;\r\n}\r\nfunction cacheDonePromiseForTransaction(tx) {\r\n    // Early bail if we've already created a done promise for this transaction.\r\n    if (transactionDoneMap.has(tx))\r\n        return;\r\n    const done = new Promise((resolve, reject) => {\r\n        const unlisten = () => {\r\n            tx.removeEventListener('complete', complete);\r\n            tx.removeEventListener('error', error);\r\n            tx.removeEventListener('abort', error);\r\n        };\r\n        const complete = () => {\r\n            resolve();\r\n            unlisten();\r\n        };\r\n        const error = () => {\r\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\r\n            unlisten();\r\n        };\r\n        tx.addEventListener('complete', complete);\r\n        tx.addEventListener('error', error);\r\n        tx.addEventListener('abort', error);\r\n    });\r\n    // Cache it for later retrieval.\r\n    transactionDoneMap.set(tx, done);\r\n}\r\nlet idbProxyTraps = {\r\n    get(target, prop, receiver) {\r\n        if (target instanceof IDBTransaction) {\r\n            // Special handling for transaction.done.\r\n            if (prop === 'done')\r\n                return transactionDoneMap.get(target);\r\n            // Polyfill for objectStoreNames because of Edge.\r\n            if (prop === 'objectStoreNames') {\r\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\r\n            }\r\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\r\n            if (prop === 'store') {\r\n                return receiver.objectStoreNames[1]\r\n                    ? undefined\r\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\r\n            }\r\n        }\r\n        // Else transform whatever we get back.\r\n        return wrap(target[prop]);\r\n    },\r\n    set(target, prop, value) {\r\n        target[prop] = value;\r\n        return true;\r\n    },\r\n    has(target, prop) {\r\n        if (target instanceof IDBTransaction &&\r\n            (prop === 'done' || prop === 'store')) {\r\n            return true;\r\n        }\r\n        return prop in target;\r\n    },\r\n};\r\nfunction replaceTraps(callback) {\r\n    idbProxyTraps = callback(idbProxyTraps);\r\n}\r\nfunction wrapFunction(func) {\r\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\r\n    // only create one new func per func.\r\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\r\n    if (func === IDBDatabase.prototype.transaction &&\r\n        !('objectStoreNames' in IDBTransaction.prototype)) {\r\n        return function (storeNames, ...args) {\r\n            const tx = func.call(unwrap(this), storeNames, ...args);\r\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\r\n            return wrap(tx);\r\n        };\r\n    }\r\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\r\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\r\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\r\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\r\n    // undefined if the end of the cursor has been reached.\r\n    if (getCursorAdvanceMethods().includes(func)) {\r\n        return function (...args) {\r\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\r\n            // the original object.\r\n            func.apply(unwrap(this), args);\r\n            return wrap(cursorRequestMap.get(this));\r\n        };\r\n    }\r\n    return function (...args) {\r\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\r\n        // the original object.\r\n        return wrap(func.apply(unwrap(this), args));\r\n    };\r\n}\r\nfunction transformCachableValue(value) {\r\n    if (typeof value === 'function')\r\n        return wrapFunction(value);\r\n    // This doesn't return, it just creates a 'done' promise for the transaction,\r\n    // which is later returned for transaction.done (see idbObjectHandler).\r\n    if (value instanceof IDBTransaction)\r\n        cacheDonePromiseForTransaction(value);\r\n    if (instanceOfAny(value, getIdbProxyableTypes()))\r\n        return new Proxy(value, idbProxyTraps);\r\n    // Return the same value back if we're not going to transform it.\r\n    return value;\r\n}\r\nfunction wrap(value) {\r\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\r\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\r\n    if (value instanceof IDBRequest)\r\n        return promisifyRequest(value);\r\n    // If we've already transformed this value before, reuse the transformed value.\r\n    // This is faster, but it also provides object equality.\r\n    if (transformCache.has(value))\r\n        return transformCache.get(value);\r\n    const newValue = transformCachableValue(value);\r\n    // Not all types are transformed.\r\n    // These may be primitive types, so they can't be WeakMap keys.\r\n    if (newValue !== value) {\r\n        transformCache.set(value, newValue);\r\n        reverseTransformCache.set(newValue, value);\r\n    }\r\n    return newValue;\r\n}\r\nconst unwrap = (value) => reverseTransformCache.get(value);\r\n\r\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\r\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\r\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\r\n\r\n/**\r\n * Open a database.\r\n *\r\n * @param name Name of the database.\r\n * @param version Schema version.\r\n * @param callbacks Additional callbacks.\r\n */\r\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\r\n    const request = indexedDB.open(name, version);\r\n    const openPromise = wrap(request);\r\n    if (upgrade) {\r\n        request.addEventListener('upgradeneeded', (event) => {\r\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\r\n        });\r\n    }\r\n    if (blocked) {\r\n        request.addEventListener('blocked', (event) => blocked(\r\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\r\n        event.oldVersion, event.newVersion, event));\r\n    }\r\n    openPromise\r\n        .then((db) => {\r\n        if (terminated)\r\n            db.addEventListener('close', () => terminated());\r\n        if (blocking) {\r\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\r\n        }\r\n    })\r\n        .catch(() => { });\r\n    return openPromise;\r\n}\r\n/**\r\n * Delete a database.\r\n *\r\n * @param name Name of the database.\r\n */\r\nfunction deleteDB(name, { blocked } = {}) {\r\n    const request = indexedDB.deleteDatabase(name);\r\n    if (blocked) {\r\n        request.addEventListener('blocked', (event) => blocked(\r\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\r\n        event.oldVersion, event));\r\n    }\r\n    return wrap(request).then(() => undefined);\r\n}\r\n\r\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\r\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\r\nconst cachedMethods = new Map();\r\nfunction getMethod(target, prop) {\r\n    if (!(target instanceof IDBDatabase &&\r\n        !(prop in target) &&\r\n        typeof prop === 'string')) {\r\n        return;\r\n    }\r\n    if (cachedMethods.get(prop))\r\n        return cachedMethods.get(prop);\r\n    const targetFuncName = prop.replace(/FromIndex$/, '');\r\n    const useIndex = prop !== targetFuncName;\r\n    const isWrite = writeMethods.includes(targetFuncName);\r\n    if (\r\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\r\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\r\n        !(isWrite || readMethods.includes(targetFuncName))) {\r\n        return;\r\n    }\r\n    const method = async function (storeName, ...args) {\r\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\r\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\r\n        let target = tx.store;\r\n        if (useIndex)\r\n            target = target.index(args.shift());\r\n        // Must reject if op rejects.\r\n        // If it's a write operation, must reject if tx.done rejects.\r\n        // Must reject with op rejection first.\r\n        // Must resolve with op value.\r\n        // Must handle both promises (no unhandled rejections)\r\n        return (await Promise.all([\r\n            target[targetFuncName](...args),\r\n            isWrite && tx.done,\r\n        ]))[0];\r\n    };\r\n    cachedMethods.set(prop, method);\r\n    return method;\r\n}\r\nreplaceTraps((oldTraps) => ({\r\n    ...oldTraps,\r\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\r\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\r\n}));\r\n\r\nexport { deleteDB, openDB };\r\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"],"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","FirebaseError","constructor","code","message","status_","super","prependCode","customData","serverResponse","this","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","StorageErrorCode","ErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","static","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","isNode","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","undefined","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getDownloadUrl","maxOperationRetryTime","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","getResponseHeader","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","Reference","_service","_location","_newRef","root","storage","_throwIfRoot","uploadBytes$1","ref","makeRequestWithTokens","finalMetadata","getDownloadURL$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","reference","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","connectStorageEmulator$1","port","options","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","async","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","_makeRequest","add","delete","all","_getAuthToken","_getAppCheckToken","STORAGE_TYPE","uploadBytes","getModularInstance","getDownloadURL","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectStorageEmulator","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","setMultipleInstances","registerVersion","stringToByteArray$1","out","byteArrayToString","pos","c1","fromCharCode","c2","c3","c4","u","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","encodeByteArray","input","webSafe","Error","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","haveByte4","byte4","DecodeBase64StringError","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","base64Decode","console","getGlobal","self","window","global","getDefaultsFromGlobal","__FIREBASE_DEFAULTS__","getDefaultsFromEnvVariable","process","defaultsJsonString","getDefaultsFromCookie","document","cookie","getDefaults","info","getDefaultEmulatorHost","productName","_a","_b","emulatorHosts","separatorIndex","parseInt","getDefaultAppConfig","Deferred","promise","wrapCallback","callback","catch","uid","alg","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","signature","forceEnvironment","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","ERROR_NAME","captureStackTrace","ErrorFactory","create","serviceName","errors","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","deepEqual","a","aKeys","keys","bKeys","k","aProp","bProp","isObject","thing","_delegate","firebaseConfig","apiKey","authDomain","storageBucket","messagingSenderId","initializeApp","instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","Logger","_logLevel","_logHandler","_userLogHandler","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","warn","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","wrap","cacheDonePromiseForTransaction","tx","has","done","complete","DOMException","idbProxyTraps","target","prop","receiver","objectStoreNames","objectStore","replaceTraps","wrapFunction","func","transaction","unwrap","storeNames","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","storeName","store","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","providers","getProviders","provider","isVersionServiceProvider","library","logString","getComponent","logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","name$o","name$n","name$l","name$m","name$j","name$k","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","_apps","_components","_addComponent","addComponent","componentName","values","heartbeatController","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","rawConfig","existingApp","ComponentContainer","newApp","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","put","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","platformLogger","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","today","heartbeatsCache","maxSize","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","version$1","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setServiceProps","props","setInstanceCreatedCallback","Provider","instancesDeferred","instancesOptions","onInitCallbacks","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","getOrInitializeService","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","services","from","INTERNAL","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","existingInstance","invokeOnInitCallbacks","callbacks","normalizeIdentifierForFactory","addOrOverwriteComponent"],"sourceRoot":""}